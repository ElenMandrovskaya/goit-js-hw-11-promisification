{"version":3,"sources":["webpack:///./js/makeTransaction.js","webpack:///./index.js","webpack:///./js/delay.js","webpack:///./js/toggleUserState.js"],"names":["taskMakeTransaction","document","querySelector","makeTransaction","transaction","Promise","resolve","reject","delay","min","max","Math","floor","random","setTimeout","id","time","logSuccess","console","log","logError","warn","addEventListener","amount","then","catch","taskDelay","ms","logger","taskToggleUserState","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","e"],"mappings":"mGAGA,MAAMA,EAAsBC,SAASC,cAAc,WAM7CC,EAAmBC,GACd,IAAIC,QAAQ,CAACC,EAASC,KACrB,MAAMC,GANiBC,EAMiB,IANZC,EAMiB,IALhDC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAOhCI,WAAW,KACYH,KAAKE,SAAW,GAE/BP,EAAQ,CAAES,GAAIX,EAAYW,GAAIC,KAAMR,IAEpCD,EAAOH,EAAYW,KAExBP,KAGLS,EAAa,EAAEF,KAAIC,WACvBE,QAAQC,IAAK,eAAcJ,kBAAmBC,QAG1CI,EAAWL,IACfG,QAAQG,KAAM,gCAA+BN,+BAe/Cf,EAAoBsB,iBAAiB,QAAS,KAC1CnB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAC7BC,KAAKP,GACLQ,MAAML,GAEXjB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAC7BC,KAAKP,GACLQ,MAAML,GAEXjB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,KAC7BC,KAAKP,GACLQ,MAAML,GAEXjB,EAAgB,CAAEY,GAAI,GAAIQ,OAAQ,MAC7BC,KAAKP,GACLQ,MAAML,M,kCCzDf,gD,mBCGA,MAAMM,EAAYzB,SAASC,cAAc,WACnCM,EAAQmB,GAEH,IAAItB,QAAQC,IACnBQ,WAAW,KACTR,EAAQqB,IACPA,KAIDC,EAASZ,GAAQE,QAAQC,IAAK,kBAAiBH,OAGrDU,EAAUJ,iBAAiB,QAAS,KAClCJ,QAAQC,IAAIX,EAAM,KAAMgB,KAAKI,IAC7BV,QAAQC,IAAIX,EAAM,KAAMgB,KAAKI,IAC7BV,QAAQC,IAAIX,EAAM,MAAMgB,KAAKI,O,mBChB/B,MAAMC,EAAsB5B,SAASC,cAAc,WAC7C4B,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAO3B,MAAMC,EAAeF,EAASG,IAAIC,GAClCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAEjE,OAAOjC,QAAQC,QAAQ8B,IAIrBR,EAASQ,GAAgBlB,QAAQqB,MAAMH,GAE7CP,EAAoBP,iBAAiB,QAASkB,IAC1CP,EAAgBH,EAAO,SAASN,KAAKI,GACrCK,EAAgBH,EAAO,OAAON,KAAKI,O","file":"main.fbcee44e0f3399fe6146.js","sourcesContent":["// Перепиши функцию makeTransaction() так, чтобы она не использовала\n// callback - функции onSuccess и onError, а принимала всего один параметр\n// transaction и возвращала промис.\nconst taskMakeTransaction = document.querySelector('.task-3');\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n            const delay = randomIntegerFromInterval(200, 500);\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n}\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\n\n\ntaskMakeTransaction.addEventListener('click', () => {\n    makeTransaction({ id: 70, amount: 150 })\n        .then(logSuccess)\n        .catch(logError);\n\n    makeTransaction({ id: 71, amount: 230 })\n        .then(logSuccess)\n        .catch(logError);\n\n    makeTransaction({ id: 72, amount: 75 })\n        .then(logSuccess)\n        .catch(logError);\n\n    makeTransaction({ id: 73, amount: 100 })\n        .then(logSuccess)\n        .catch(logError);\n});","import './styles.css';\nimport './js/delay.js';\nimport './js/toggleUserState.js';\nimport './js/makeTransaction.js';\n","// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\"\n// через ms миллисекунд.Значением исполнившегося промиса должно быть\n// то кол - во миллисекунд которое передали во время вызова функции delay.\nconst taskDelay = document.querySelector('.task-1');\nconst delay = ms => {\n  // Твой код\n    return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ntaskDelay.addEventListener('click', () => {\n  console.log(delay(2000).then(logger)); // Resolved after 2000ms\n  console.log(delay(1000).then(logger)); // Resolved after 1000ms\n  console.log(delay(1500).then(logger)); // Resolved after 1500ms\n});","// Перепиши функцию toggleUserState() так, чтобы она не использовала\n// callback - функцию callback, а принимала всего два параметра\n// allUsers и userName и возвращала промис.\nconst taskToggleUserState = document.querySelector('.task-2')\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    // return new Promise ((resolve) => {\n    //     const updatedUsers = allUsers.map(user =>\n    //     user.name === userName ? { ...user, active: !user.active } : user,\n    //         );\n    // resolve(updatedUsers)\n    // })\n        const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n            );\n    return Promise.resolve(updatedUsers);\n//   callback(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntaskToggleUserState.addEventListener('click', e => {\n    toggleUserState(users, 'Mango').then(logger);\n    toggleUserState(users, 'Lux').then(logger);\n});\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);"],"sourceRoot":""}